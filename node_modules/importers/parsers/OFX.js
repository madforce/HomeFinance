var events = require('events');
var util = require('util');

function OFX() {
    this.version = "OFX Importer 0.0.1";
    var account_json = {
        acctID: "",
        acctType: "",
        statementStart: "",
        statementEnd: "",
        transactions: [new transaction()]
    };
    
    function transaction () {
        this.trn_date = "",
        this.trn_type = "",
        this.trn_amount = 0,
        this.trn_desciption = "";
    }
    
    this.test_event = function(data)
    {
        this.emit('data', data);
    }
    
    function getTransactions (value) {
        lines = value.split('\r\n');
        var trn_type = "",
            trn_date = "",
            trn_amount = "",
            trn_desc = "";
        account_json.transactions = new Array();
    
        for (iLine = 0; iLine < lines.length; iLine++) {
            key = lines[iLine].substring(1, lines[iLine].indexOf(">"));
            switch (key) {
                case 'TRNTYPE':
                    trn_type = lines[iLine].substring(lines[iLine].indexOf(">") + 1);
                    break;
                case 'DTPOSTED':
                    trn_date = lines[iLine].substring(lines[iLine].indexOf(">") + 1);
                    break;
                case 'TRNAMT':
                    trn_amount = lines[iLine].substring(lines[iLine].indexOf(">") + 1);
                    break;
                case 'MEMO':
                    trn_desc = lines[iLine].substring(lines[iLine].indexOf(">") + 1);
                    break;
                case '/STMTTRN':
                    tran = new transaction();
                    tran.trn_amount = trn_amount;
                    tran.trn_date = trn_date;
                    tran.trn_desciption = trn_desc;
                    tran.trn_type = trn_type;
                    account_json.transactions.push(tran);
                    // = transaction;
                    
                    break;
            }
    
        }
    }
    
    function setValue(value, target) {
        console.log("Setting " + target.toString() + "to " + value + "\r\n");
        target = value;
    }
    
    this.parseOFX = function(ofx_file) {
        //var account_statement = account_json;
        lines = ofx_file.toString().split("\r\n");
        for (iLine = 0; iLine < lines.length; iLine++) {
            tag = lines[iLine].substring(0, lines[iLine].indexOf('>') + 1);
            //console.log(tag + " = " + _keyword + "\r\n");
            //console.log('match ' + tag + ' = ' + _keyword);
            if (tag == '<STMTTRN>') {
                value = ofx_file.toString().substring(ofx_file.toString().indexOf(tag), ofx_file.toString().indexOf('</BANKTRANLIST'));
                getTransactions(value);
            }
            else {
                value = lines[iLine].substring(lines[iLine].indexOf('>') + 1);
                switch (tag) {
                    case '<ACCTID>':
                        account_json.acctID = value;
                        break;
                    case '<DTSTART>':
                        account_json.statementStart = value;
                        break;
                    case '<DTEND>':
                        account_json.statementEnd = value;
                        break;
                    case '<ACCTTYPE>':
                        account_json.acctType = value;
                        break;
                }
                //keyword_map[iKeyword].method(lines[iLine].substring(lines[iLine].indexOf('>') + 1));
            }
        }
        return account_json;
    }
    
}
util.inherits(OFX, events.EventEmitter);
module.exports = new OFX();